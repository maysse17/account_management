// Colors
$brand-primary: #29b5a8;
$brand-secondary: #ff8300;
$gray: #6b7381;
$gray-light: lighten($gray, 15%);
$gray-lighter: lighten($gray, 30%);;

// Button Colors
$btn-default-color: $gray;
$btn-default-bg: $gray-lighter;

// Toggle Sizes
$toggle-default-size: 1.5rem;
$toggle-default-label-width: 4rem;
$toggle-default-font-size: @include 75rem;


// General Styles for Demo
body {
  font-family: 'Montserrat', 'Lato', 'Open Sans', 'Helvetica Neue', Helvetica, Calibri, Arial, sans-serif;
  color: $gray;
  background: #f2f2f2;
}
.jumbotron {
  background: $gray;
  color: $gray-lighter;
  h1 {
    color: #fff;
  }
}
.example {
  margin: 4rem auto;
  > .row {
    margin-top: 2rem;
    height: 5rem;
    vertical-align: middle;
    text-align: center;
    border: 1px solid fade($gray-lighter,50%);
    &:first-of-type {
      border:none;
      height: auto;
      text-align: left;
    }
  }
  h3 {
    font-weight: 400;
    > small {
      font-weight: 200;
      font-size: @include 75em;
      color: $gray-light;
    }
  }
  h6 {
    font-weight: 700;
    font-size: @include 65rem;
    letter-spacing: 3.32px;
    text-transform: uppercase;
    color: $gray-lighter;
    margin: 0;
    line-height:5rem;
  }
  .btn-toggle {
    top: 50%;
    transform: translateY(-50%);
  }
}



// Mixin for Switch Colors
// Variables: $color, $bg, $active-bg
@mixin toggle-color($color: $btn-default-color; $bg: $btn-default-bg; $active-bg: $brand-primary;){
  color: $color;
  background: $bg;
  &:before,
  &:after {
    color: $color;
  }
  &.active {
    background-color: $active-bg;
  }
}

// Mixin for Default Switch Styles
// Variables: $size, $margin, $color, $bg, $active-bg, $font-size
@mixin toggle-mixin($size: $toggle-default-size; $margin: $toggle-default-label-width; $font-size: $toggle-default-font-size;){
  // color: $color;
  // background: $bg;
  margin: 0 $margin;
  padding: 0;
  position: relative;
  border: none;
  height: $size;
  width: $size * 2;
  border-radius: $size;

  &:focus,
  &.focus {
    &,
    &.active {
      outline: none;
    }
  }

  &:before,
  &:after {
    line-height: $size;
    width: $margin;
    text-align: center;
    font-weight: 600;
    // color: $color;
    font-size: $font-size;
    text-transform: uppercase;
    letter-spacing: 2px;
    position: absolute;
    bottom: 0;
    transition: opacity @include 25s;
  }
  &:before {
    content: 'Off';
    left: -$margin;
  }
  &:after {
    content: 'On';
    right: -$margin;
    opacity: @include 5;
  }

  > .handle {
    position: absolute;
    top: ($size * .25) / 2;
    left: ($size * .25) / 2;
    width: $size * @include 75;
    height: $size * @include 75;
    border-radius: $size * @include 75;
    background: #fff;
    transition: left @include 25s;
  }
  &.active {
    transition: background-color @include 25s;
    > .handle {
      left: $size + (($size * .25) / 2);
      transition: left @include 25s;
    }
    &:before {
      opacity: @include 5;
    }
    &:after {
      opacity: 1;
    }
  }

  &.btn-sm {
    &:before,
    &:after {
      line-height: $size - 2px;
      color: #fff;
      letter-spacing: @include 75px;
      left: $size * @include 275;
      width: $size * 1.55;
    }
    &:before {
      text-align: right;
    }
    &:after {
      text-align: left;
      opacity: 0;
    }
    &.active {
      &:before {
        opacity: 0;
      }
      &:after {
        opacity: 1;
      }
    }
  }

  &.btn-xs {
    &:before,
    &:after {
      display: none;
    }
  }
}



// Apply Mixin to different sizes & colors
.btn-toggle {

  @include toggle-mixin;
  @include toggle-color;

  &.btn-lg {
    @include toggle-mixin($size: 2.5rem; $font-size: 1rem; $margin: 5rem;);
  }

  &.btn-sm {
    @include toggle-mixin($font-size: @include 55rem; $margin: @include 5rem;);
  }

  &.btn-xs {
    .toggle-mixin($size:1rem;$margin:0;)
  }

  &.btn-secondary {
    @include toggle-color($active-bg:$brand-secondary);
  }
}
//
// Grid system
// --------------------------------------------------


// Container widths
//
// Set the container width, and override it for fixed navbars in media queries.

.container {
  @include container-fixed();

  @media (min-width: $screen-sm-min) {
    width: $container-sm;
  }
  @media (min-width: $screen-md-min) {
    width: $container-md;
  }
  @media (min-width: $screen-lg-min) {
    width: $container-lg;
  }
}


// Fluid container
//
// Utilizes the mixin meant for fixed width containers, but without any defined
// width for fluid, full width layouts.

.container-fluid {
  @include container-fixed();
}


// Row
//
// Rows contain and clear the floats of your columns.

.row {
  @include make-row();
}


// Columns
//
// Common styles for small and large grid columns

@include make-grid-columns();


// Extra small grid
//
// Columns, offsets, pushes, and pulls for extra small devices like
// smartphones.

@include make-grid(xs);


// Small grid
//
// Columns, offsets, pushes, and pulls for the small device range, from phones
// to tablets.

@media (min-width: $screen-sm-min) {
  @include make-grid(sm);
}


// Medium grid
//
// Columns, offsets, pushes, and pulls for the desktop device range.

@media (min-width: $screen-md-min) {
  @include make-grid(md);
}


// Large grid
//
// Columns, offsets, pushes, and pulls for the large desktop device range.

@media (min-width: $screen-lg-min) {
  @include make-grid(lg);
}
